version: "3.7"
services:

  mariadb:
    image: mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: my_db
    networks: [local_net]
    # ports: ["3306"] 
    volumes:
      - ./mariadb/data:/var/lib/mysql

  mysql:
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: my_db
    networks: [local_net]
    # ports: ["3306"]
    volumes:
      - ./mysql/data:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: "mariadb"   # change to 'mysql' to switch server
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: 1234 
      PMA_USER: root
      PMA_PASSWORD: 1234
    restart: always
    networks: [local_net]
    ports: ["8010:80"]
    volumes:
     - ./phpmyadmin/sessions:/sessions

  postgres:
    image: postgres:13.1
    environment:
      POSTGRES_PASSWORD: "1234"
      POSTGRES_USER: "postgres"
      POSTGRES_DB: "postgres"
    restart: unless-stopped 
    networks: [local_net]
    ports: ["5432"]
    volumes:
      -  ./postgres/data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    environment: 
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "1234"
      PGADMIN_LISTEN_ADDRESS: "0.0.0.0"
      SERVER_MODE: 0
      # PGADMIN_LISTEN_PORT: "5454" 
    networks: [local_net]
    ports: ["8011:80"]

  redis:
    image: redis:alpine
    restart: unless-stopped
    networks: [local_net]

  rabbitmq:
    image: rabbitmq:3.8.9-management
    ports: ["15672"] 
    environment:
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: "400MB"
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: "1234"
    networks: [local_net]
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq

  # sqlserver
  # kafka
  # elastic 
  # mongo
  
  # nodejs ------------------
  
  nodejs:
    build:
      context: ./nodejs/
      dockerfile: ./vx.Dockerfile
      target: dev
    image: nodejs:dev
    networks: [local_net]
    
  nvm:
    build:
      context: ./nodejs/
      dockerfile: ./nvm.Dockerfile
      target: dev
    image: nvm:dev
    networks: [local_net]

  # go ------------------

  # go:
  #   build:
  #     context: ./go
  #     target: dev
  #   image: go:dev
  #
  #   security_opt:
  #     - seccomp:unconfined
  #   volumes:
  #     - ./go/src:/go/src/app-go

  # php  ------------------

  php7:
    build:
      context: ./php
      dockerfile: ./v7.Dockerfile
      target: dev
    image: php7:dev
    networks: [local_net]
    volumes:
      - ./php:/usr/src/app

  php8:
    build:
      context: ./php
      dockerfile: ./v8.Dockerfile
      target: dev
    image: php8:dev
    networks: [local_net]
    volumes:
      - ./php:/usr/src/app

  # app-java:
  #   build:
  #     context: ./app-java
  #     target: dev
  #     args: 
  #       - USER_UID=1001
  #       - USER_GID=1002
  #       - USER=docky
  #   image: app-java:dev
  #   # environment:
  #   user: docky
  #
  #   extra_hosts:
  #     - "redis:127.0.0.1"
  #     - "postgres:127.0.0.1"
  #     - "mysql:127.0.0.1"
  #   volumes: 
  #     - ./app-java/src:/usr/src/app-java

  # todo: add .devcontainer 
  # app-node:
  #   build:
  #     context: ./app-node
  #     target: dev
  #     args:
  #       - USER_UID=1001
  #       - USER_GID=1002
  #       - USER=docky
  #   image: app-node:dev
  #   user: docky
  #
  #   ports:
  #     - "8000:8000"
  #   extra_hosts:
  #     - "redis:127.0.0.1"
  #     - "postgres:127.0.0.1"
  #     - "mysql:127.0.0.1"
  #   volumes: 
  #     - ./app-node/src:/node/src/app-node

  # app-php

  # no funciona
  # app-kotlin:
  #   build:
  #     context: ./app-kotlin
  #     target: dev
  #     args:
  #       - USER_UID=1001
  #       - USER_GID=1002
  #       - USER=docky
  #   image: app-kotlin:dev
  #   user: docky
  #
  #   ports:
  #     - "8000:8000"
  #   extra_hosts:
  #     - "redis:127.0.0.1"
  #     - "postgres:127.0.0.1"
  #     - "mysql:127.0.0.1"
  #   volumes: 
  #     - ./app-kotlin/src:/kotlin/src/app-kotlin

  # databases:

networks:
  local_net:
    name: local_net
    driver: bridge
